在微信小程序中，要显示一张图片，有两种图片加载方式：
加载本地图片
<image class="widget__arrow" src="/image/arrowright.png" mode="aspectFill">  
</image>
加载网络图片
<image class="image_frame" src="{{imageUrl}}" mode="aspectFill">  
</image> 
data:{  
    imageUrl:"http://img1.3lian.com/2015/w7/85/d/101.jpg"  
}, 

数据绑定

（1）一个变量

var json ={
	val:"123",
	condition:true,
	id:100
}
Page({
	data:json
})
/*访问方式*/
1.1值的访问
<view>{{val}}</view>
1.2组件属性
<view id="view-{{id}}"></view>
1.3控制属性访问
<view wx:if="{{condition}}"></view>

（2）列表数据绑定

var list =[
{
	name:"xxx",
	age:"xxxx"
},
{
	name:"xxx",
	age:"xxx"
}
]

Page({
	
	data:{
	list:list
	}
});

/*数据访问*/
<view wx:for="{{list}}" wx:for-index="idx" wx:for-item ="listItem"></view>

wx:for-index="idx" 需要修改索引的名字
wx:for-item="listItem" 需要修改item的名字
如果想一次遍历创建多个视图
<block wx:for="{{list}}"></block>

模板
<template name="listItem">
	<view></view>
	<view></view>
</template>

模板的使用
<template is="listItem" data ="数据"></template>

引用模板
<import src="引入的路径"/>

文件的引用
<inclue src=""/>

这种引入方式,不会引入创建的模板
src->接入的数公共代码的文件路径
模块

模块的定义
参数和函数

var val = {"code":"300","message":"成功"}
function test(){
	console.log("test");
}


module.exports = {
	val:val,
	test:test
}

js方法的返回，js方法默认是有返回值的，如果没有写return，默认返回来的就是undefined
function add(a, b){
    return a + b;
}

wxss样式文件
公共的样式文件导入
@import "文件的相对路径"

滚动视图
scroll-view

scroll-x	Boolean	false	允许横向滚动 
scroll-y	Boolean	false	允许纵向滚动
upper-threshold	Number	50	距顶部/左边多远时（单位px），触发 scrolltoupper 事件 
lower-threshold	Number	50	距底部/右边多远时（单位px），触发 scrolltolower 事件
scroll-top	Number		设置竖向滚动条位置 内容也会跟着滚动
scroll-left	Number		设置横向滚动条位置
scroll-into-view	String		值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素  
scroll-with-animation	Boolean	false	在设置滚动条位置时使用动画过渡
enable-back-to-top	Boolean	false	iOS点击顶部状态栏、安卓双击标题栏时，滚动条返回顶部，只支持竖向
bindscrolltoupper	EventHandle		滚动到顶部/左边，会触发 scrolltoupper 事件 
bindscrolltolower	EventHandle		滚动到底部/右边，会触发 scrolltolower 事件
bindscroll	EventHandle		滚动时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}

swiper
滑动视图 可实现轮播滚动
indicator-dots	Boolean	false	是否显示面板指示点	
indicator-color	Color	rgba(0, 0, 0, .3)	指示点颜色	1.1.0
indicator-active-color	Color	#000000	当前选中的指示点颜色	1.1.0
autoplay	Boolean	false	是否自动切换	
current	Number	0	当前所在滑块的 index	
current-item-id	String	""	当前所在滑块的 item-id ，不能与 current 被同时指定	1.9.0
interval	Number	5000	自动切换时间间隔	
duration	Number	500	滑动动画时长	
circular	Boolean	false	是否采用衔接滑动	
vertical	Boolean	false	滑动方向是否为纵向	
previous-margin	String	"0px"	前边距，可用于露出前一项的一小部分，接受 px 和 rpx 值	1.9.0
next-margin	String	"0px"	后边距，可用于露出后一项的一小部分，接受 px 和 rpx 值	1.9.0
display-multiple-items	Number	1	同时显示的滑块数量	1.9.0
skip-hidden-item-layout	Boolean	false	是否跳过未显示的滑块布局，设为 true 可优化复杂情况下的滑动性能，但会丢失隐藏状态滑块的布局信息	1.9.0
bindchange	EventHandle		current 改变时会触发 change 事件，event.detail = {current: current, source: source}	
bindanimationfinish	EventHandle		动画结束时会触发 animationfinish 事件，event.detail 同上

<icon type="success" size="40" color="red"></icon>

type	String		icon的类型，有效值：success, success_no_circle, info, warn, waiting, cancel, download, search, clear
size	Number	23	icon的大小，单位px
color	Color		icon的颜色，同css的color

进度条 <progress></progress>

percent	Float	无	百分比0~100	 进度值
show-info	Boolean	false	是否进度条右侧显示百分比	 
stroke-width	Number	6	进度条线的宽度，单位px	
color	Color	#09BB07	进度条颜色 （请使用 activeColor）	
activeColor	Color		有进度的颜色	
backgroundColor	Color	没有进度的颜色	
active	Boolean	false	进度条从左往右的动画	 是否有动画
active-mode	String	backwards	backwards: 动画从头播；forwards：动画从上次结束点接着播


设置页面的背景色
在app.wxss中使用

page{

background-color:"#fff";

height:100%;

}


<view style="background-image:url('../../images/加减矩形2.png') no-repeat"></view>

.page {
width: 100%;
height: 100%;
background: url(http://img.weiye.me/zcimgdir/album/file_597701fe8e3d9.png) no-repeat;
background-size: cover;
text-align: center;
font-size: 14px;
background-attachment: fixed;
}

<view class="page">
</view>

1、要是希望在wxss文件中使用背景图，我们可以使用网络图片，或者base64位的图片

2、通常情况下在CSS文件中我们是没有办法拿到后台返回的域名，然后我们又希望可以使用一些本地的小图标之类的，我们可以在wxml中使用背景图，直接在view的style中写样式
3、在页面中直接使用image标签，然后使用绝对定位

/*变量想改值 只能定义一个变量*/
Page({
  data: {
    text: 'init data',
    array: [{text: 'init data'}],
    object: {
      text: 'init data'
    }
  },
  changeText: function() {
    // this.data.text = 'changed data'  // bad, it can not work
    this.setData({
      text: 'changed data'
    })
  }

    /********************************************弹框提示**************************************/
    /*ActionSheet*/
    wx.showActionSheet({
      itemList: ["1","2","3"],
      "itemColor":"#999",
      success: function (tapIndex){
        console.log(tapIndex);
      },
      fail:function(res){
        console.log("错误信息"+res.errMsg);
      }
    })
    itemList 弹出的文本内容
    itemColor 文本颜色
    success 成功回调  success返回参数说明  tapIndex	Number	用户点击的按钮，从上到下的顺序，从0开始
    fail 失败回调

    /*alertView*/
     wx.showModal({
      title: '提示的标题',
      content: '提示的内容',
      showCancel:true,
      cancelText:"取消",
      cancelColor:"red",
      confirmText:"确定",
      confirmColor:"green",
      success: function (res){
        if (res.confirm) {
          console.log('用户点击确定')
        } else if (res.cancel) {
          console.log('用户点击取消')
        }
      }
    })

title	String	是	提示的标题
content	String	是	提示的内容
showCancel	Boolean	否	是否显示取消按钮，默认为 true
cancelText	String	否	取消按钮的文字，默认为"取消"，最多 4 个字符
cancelColor	HexColor	否	取消按钮的文字颜色，默认为"#000000"
confirmText	String	否	确定按钮的文字，默认为"确定"，最多 4 个字符
confirmColor	HexColor	否	确定按钮的文字颜色，默认为"#3CC51F"
success	Function	否	接口调用成功的回调函数
fail	Function	否	接口调用失败的回调函数
complete	Function	否	接口调用结束的回调函数（调用成功、失败都会执行）

/*MBProgressHUD*/
    wx.showToast({
      title: '提示的内容',
      icon:"loading",
      "duration":3000,
      mask:true,
      success:function(res){
        console.log("弹出成功");
      }
    })

title	String	是	提示的内容	
icon	String	否	图标，有效值 "success", "loading", "none"	
image	String	否	自定义图标的本地路径，image 的优先级高于 icon
duration	Number	否	提示的延迟时间，单位毫秒，默认：1500	
mask	Boolean	否	是否显示透明蒙层，防止触摸穿透，默认：false	
success	Function	否	接口调用成功的回调函数


/*MBProgressHUD 添加提示框*/
    wx.showLoading({
      title: '提示的内容',
      mask:true,
      success:function(res){
        console.log("显示成功");
      }
    })

/*MBProgressHUD 移除提示框*/
    wx.hideLoading();

  /********************************************动画**************************************/


初始化GlobalData
在App.js的最上方可以设置GlobalData的初始值。

App({  
  globalData:{  
    appid: '1wqas2342dasaqwe232342xxxxxxxxxx',//appid需自己提供，此处的appid我随机编写    
    secret: 'e0dassdadef2424234209bwXXXXXXXXXXXXXX',//secret需自己提供，此处的secret我随机编写   
    openid:'你好', //自定义  
  },  


  在App.js中修改GlobalData的值
比如，获得UserInfo后将openid的值赋值给GlobalData中的openid，可以这样写：

this.globalData.openid = e.detail.openid;  

this代表的是当前文件。
在小程序的页面中调用和写入GlobalData

var app = getApp();

var getAppInfo = app.globalData.openid;  
console.log(getAppInfo)  

在页面中设置openid：
getApp().globalData.openid = "12345";

//动态样式  
<view style="color:{{color}};" />  
style="width:{{imageWidth}}rpx;height:{{imageHeight}}rpx";  
//静态样式  
style="color: #1083E5;font-size: 48rpx;font-weight:bold;" 

/*数组清空处理*/
   // lists = [];
    // pxList = [];
    lists.splice(0,lists.length);
    pxList.splice(0, pxList.length);

